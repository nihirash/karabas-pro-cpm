    module Disk
set_dma:
    ld hl, bc
    ld (dma_addr), hl
    ret

seldsk:
    ld a, (cur_drive) : ld (.drive), a
    ld hl, 0
    ld a, (IDEDOS_Volumes.volumes_found)
    cp c
    jr c, .exit
    ld a, c
    ld (cur_drive), a
    ld hl, dpbase    
    and a : ret z
.loop    
    ld de, 16
    add hl, de
    dec a
    jr nz ,.loop
    ret
.exit
    ld a, 0
.drive = $ - 1 
    ld (TDRIVE), a
    ld (cur_drive), a
    ld hl, 0
    ret

settrk:
    ld hl, bc
    ld (disk_trk), hl
    ret

setsec:
    ld hl, bc
    ld (disk_sec), bc
    ret

home:
    ld hl, 0
    ld (disk_sec), hl
    ld (disk_trk), hl
    xor a
    ret

checksect:
    call calc_offset
    ld hl, (IDEDOS_Volumes.cur_sect)
    ld a, h : cp b : jr nz, .do_read
    ld a, l : cp c : jr nz, .do_read
    ld hl, (IDEDOS_Volumes.cur_sect + 2)
    ld a, h : cp d : jr nz, .do_read
    ld a, l : cp e : jr nz, .do_read
    ret 
.do_read
    ld (IDEDOS_Volumes.cur_sect), bc
    ld (IDEDOS_Volumes.cur_sect + 2), de
    ld hl, IDEDOS_Volumes.sec_buffer
    call Drive.read
    ret

read:
    call checksect

    ld a, (disk_sec)
    and 3
    ld hl, IDEDOS_Volumes.sec_buffer
    ld de, 128
    jr z, .copy
.offset    
    add hl, de
    dec a
    jr nz, .offset
.copy
    ld de, (dma_addr)
    ld bc, 128
    ldir
    ei
    xor a
    ret

write:
    call checksect
    
    ld a, (disk_sec)
    and 3
    ld hl, IDEDOS_Volumes.sec_buffer
    ld de, 128
    jr z, .copy
.offset    
    add hl, de
    dec a
    jr nz, .offset
.copy
    ex de, hl
    ld hl, (dma_addr)
    ld bc, 128
    ldir

    ld bc, (IDEDOS_Volumes.cur_sect)
    ld de, (IDEDOS_Volumes.cur_sect + 2)
    ld hl, IDEDOS_Volumes.sec_buffer
    call Drive.write
    xor a
    ret

sectran:
    ld hl, bc
    ret

calc_offset:
    ld a, (cur_drive)
    ld ix, drives_offsets
    and a : jr z, .calc
    ld bc, 3
.offset
    add ix, bc
    dec a
    jr nz, .offset
.calc
    ld hl,(disk_trk)
    ld de,(disk_sec)
   
    srl d
    rr e
    srl d
    rr e

   
    ld b, 0
    ld c, (ix + 2)
    add hl,bc
    srl l
    jr nc, .sec1
    ld d, 1
.sec1
    ld a, h
    and 1
    jr z, .sec2
    ld a, l
    or #80
    ld l, a
.sec2
    ld h, 0
    ld b, (ix + 1)
    ld c, (ix + 0)
    add hl, bc
    call IDEDOS_Volumes.chs_to_sector

    ld bc, hl
    ret

dma_addr dw 0
disk_sec dw 0 
disk_trk dw 0
cur_drive db 0

dpblk:	;disk parameter block for all disks.
    defw	#0200		;sectors per track
    defm	#05		;block shift factor
    defm	#1f		;block mask
    defm	#01		;null mask
    defw	#07ff	;disk size-1
    defw	#01ff	;directory max
    defm	240		;alloc 0
    defm	0		;alloc 1
    defw	0	    ;check size - don't care about it - SD card isn't removable
    defw	#0	    ;track offset

    endmodule