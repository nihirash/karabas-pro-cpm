    module IDEDOS_Volumes

IDEDOS_PE_START_CYL_LO    equ 0x11
IDEDOS_PE_START_CYL_HI    equ 0x12
IDEDOS_PE_START_HEAD      equ 0x13
IDEDOS_PE_END_CYL_LO      equ 0x14
IDEDOS_PE_END_CYL_HI      equ 0x15
IDEDOS_PE_END_HEAD        equ 0x16

init:
    di
    call load_part_table : jp nz, .error1
    ld hl, (part_table_offset)
    ld a, 0 : ld (Disk.cur_drive), a
.loop
    ld a, (Disk.cur_drive) : cp MAX_VOLUMES : ret z 
    ;; Slower but any order is OK now :-)
    call load_part_table
    ld iy, partition : call find_partition : jr nz, .notFound

    ld hl, Disk.cur_drive : inc (hl)
    ld hl, part_letter : inc (hl)

    jr .loop

.notFound:
    ret
.error1
    ld a, (Drive.slot) : cp Drive.slot2 : jr z, .swap_sd

    ld hl, 0 : ld (part_table_offset), hl
    ld a, Drive.slot2 : ld (Drive.slot), a
    jr init

.swap_sd
    ld a, Drive.slot1 : ld (Drive.slot), a
    ld hl, .error1msg
    call BIOS.bios_print
.wait_key
    xor a : in a, (#fe)  : cpl : and 31 : jr z, .wait_key

    call Drive.init
    ld hl, 0 : ld (part_table_offset), hl
    
    jr init

.error1msg
    db 27, "b", #0A
    db 13, 10, "[ERROR]"
    db 27, "b", #00
    db " Didn't found partition table", 13, 10
    db "Insert right SD card and press ", 27, "b", #09, "[SPACE]", 27, "b", #00, 13, 10
    db #FF

find_partition:
    ld bc, 0  : ld de, (part_table_offset) : ld hl, sec_buffer
    call Drive.read

    ld ix, sec_buffer
    ld b, 8 ; Partitions per sector
.loop
    ld a, (ix + #10) ; Partition type
    and a : jp z, .unused 
    ld a, (ix + 0) : cp (iy + 0) : jp nz, .wrong    ; C
    ld a, (ix + 1) : cp (iy + 1) : jp nz, .wrong    ; P
    ld a, (ix + 2) : cp (iy + 2) : jp nz, .wrong    ; M
    ld a, (ix + 3) : cp (iy + 3) : jp nz, .wrong    ; .
    ld a, (ix + 4) : cp (iy + 4) : jp nz, .wrong    ; A
    ld a, (ix + 5) : cp (iy + 5) : jr nz, .wrong    ; <space>
    ld a, (ix + 6) : cp (iy + 6) : jr nz, .wrong    ; <space> ... I think we can stop here :-)     
    
    ;; Found partition
    ld l, (ix + IDEDOS_PE_START_CYL_LO)
    ld h, (ix + IDEDOS_PE_START_CYL_HI)
    ld a, (Disk.cur_drive) : ld iy, Disk.drives_offsets
    and a : jr z, .write_offset 

    ld bc, 3
.offset_loop
    add iy, bc
    dec a
    jr nz, .offset_loop
.write_offset
    ld (iy + 0), l
    ld (iy + 1), h
    ld a, (ix + IDEDOS_PE_START_HEAD)
    ld (iy + 2), a
    ld hl, volumes_found : inc (hl)
    xor a
    ret
.wrong
    ld de, #40
    add ix, de
    dec b
    jp nz, .loop
    ld hl, (part_table_offset) : inc hl : ld (part_table_offset), hl
    jp find_partition
.unused
    or 1
    ret

load_part_table:
    ld bc, 0
    ld de, 0
    ld hl, sec_buffer
    call Drive.read
    call find_part_table
    ret z
    ld bc, 0
    ld de, 128
    ld (part_table_offset), de
    ld hl, sec_buffer
    call Drive.read
    call find_part_table
    ret 
    

find_part_table:
    ld ix, sec_buffer
    ld a, (ix + #00) : cp 'P' : ret nz
    ld a, (ix + #01) : cp 'L' : ret nz
    ld a, (ix + #02) : cp 'U' : ret nz
    ld a, (ix + #10) : cp #01 : ret nz ; Partition table
    ret


chs_to_sector:
; HL - cylinder
; D  - head
; E  - sector
; returns:
; HL:DE - 32-bit sector number (MSB .. LSB)
; corrupts:
; flags, A, BC
    ld a, d
    and 1 ; assuming two heads
    jr z, _chs_to_sector_carry_on
    ld a, e
    or 0x80 ; with the assumption that sector number is always below 128
    ld e, a
_chs_to_sector_carry_on:
    push hl
    pop bc
    ld h, 0
    ld l, b
    ld d, c
    ret


cur_sect   ds 4
sec_buffer ds 512

part_table_offset dw 0
volumes_found db #ff
partition   db 'CPM.'
part_letter db 'A  '

    endmodule